import random  # Importing the random module for generating random responses
import json  # Importing the json module for reading intents data from a JSON file
import torch  # Importing PyTorch for building and using the neural network model
from nltk_utils import bag_of_words
# Importing the ChatbotModel class from the model module
from model import ChatbotModel

# Importing utility functions for preprocessing text from nltk_utils.py
from nltk_utils import preprocess_text

# Checking for the availability of GPU, if available, using it for computations
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Loading the intents data from the JSON file 'intents.json'
with open('intents.json', 'r') as json_data:
    intents = json.load(json_data)

# Loading the pre-trained model and related data from the 'data.pth' file
FILE = "data.pth"
data = torch.load(FILE)

# Retrieving the input, hidden, and output sizes along with other data from the loaded model
input_size = data["input_size"]
hidden_size = data["hidden_size"]
output_size = data["output_size"]
all_words = data['all_words']
tags = data['tags']
model_state = data["model_state"]

# Instantiating the chatbot model, loading its state, and setting it to evaluation mode
model = ChatbotModel(input_size, hidden_size, output_size)
model.model.load_state_dict(model_state)
model.model.eval()

bot_name = "Sam"  # Defining the name of the chatbot
def get_response(msg):
    """
    Function to generate a response for a given message.

    Args:
        msg (str): The input message from the user.

    Returns:
        str: The response generated by the chatbot.
    """
    # Preprocess the input message using utility functions from nltk_utils.py
    tokens = preprocess_text(msg)

    # Converting the tokenized sentence into a bag of words representation
    X = bag_of_words(tokens, all_words)
    # Reshaping the bag of words representation
    X = X.reshape(1, X.shape[0])

    # Converting the bag of words representation into a PyTorch tensor and moving it to the appropriate device (GPU or CPU)
    X = torch.from_numpy(X).to(device)

    # Forward pass through the neural network model
    output = model.model(X)

    # Getting the index of the predicted class
    _, predicted = torch.max(output, dim=1)

    # Mapping the predicted index to the corresponding tag
    tag = tags[predicted.item()]

    # Calculating the probability of the predicted class
    probs = torch.softmax(output, dim=1)
    prob = probs[0][predicted.item()]

    print("Probability:", prob.item())

    # If the probability is high enough, select a response from the intents data based on the predicted tag
    if prob.item() > 0.85:
        for intent in intents['intents']:
            if tag == intent["tag"]:
                return random.choice(intent['responses'])

    # If the probability is not high enough or no appropriate response is found, provide a default response
    return "Apologies, I didn't get that. Could you try saying it differently?"

# Main block for running the chatbot interactively
if __name__ == "__main__":
    while True:
        sentence = input("You: ")  # Getting input from the user
        if sentence == "quit":  # Exiting the loop if the user enters "quit"
            break

        resp = get_response(sentence)  # Generating a response for the input message
        print(resp)  # Printing the response
